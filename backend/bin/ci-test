#!/bin/bash
set -euo pipefail

###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
#
# FUNCTION: Error Handler
#
###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
cleanup() {
  echo "Running clean up"

  echo "START: Stopping remove"
  ./bin/remote-stop
  echo "DONE: Stopping remove"

  echo "START: Stack Remove"
  ./bin/stack-remove
  echo "DONE: Stack Remove"
}
trap cleanup 0

error() {
  local parent_lineno="$1"
  local message="$2"
  local code="${3:-1}"
  if [[ -n "$message" ]] ; then
    echo "Error on or near line ${parent_lineno}: ${message}; exiting with status ${code}"
  else
    echo "Error on or near line ${parent_lineno}; exiting with status ${code}"
  fi
  exit "${code}"
}

trap 'error ${LINENO}' ERR

###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
#
# FUNCTION: Integration Test
#
###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

echo "STAR: Running Deploy"
./bin/stack-deploy
echo "END: Running Deploy"

echo "START: Setting up remote database connection"
./bin/remote-start
echo "END: Setting up remote database connection"

echo "START: Running Migration"
yarn knex migrate:latest --env "$STAGE"
echo "END: Running Migration"

echo "START: Running Seeding"
yarn knex seed:run
echo "END: Running Seeding"

echo "START: Running API Test"
STACK_NAME="engstats-$STAGE-$AWS_REGION" # TODO: Get from serverless.yml?
GRAPHQL_URL=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query "Stacks[0].Outputs[?OutputKey=='GraphQLUrl'].OutputValue" --output text)

curl --request POST \
  --url "$GRAPHQL_URL" \
  --header 'content-type: application/json' \
  --data '{"query":"query {\n  users {\n    email\n    first_name\n    last_name\n  }\n}"}'
echo "END: Running API Test"

echo "ðŸŽ‰ Done! ðŸŽ‰"