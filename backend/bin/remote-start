#!/bin/bash
set -euo pipefail

STAGE=""

usage="USAGE: $(basename "$0") [-s|--stage] <stage>
where:
    -s | --stage        stage for deployment (required)
    -h | --help         show this help text"

while [ $# -gt 0 ]; do
    if [[ $1 =~ "--"* ]]; then
        case $1 in
            --help|-h) echo "$usage"; exit; ;;
            --stage|-s) STAGE=$2;;
        esac
    fi
    shift
done

SERVICE_STACK_STACK="engstats-$STAGE"
BASTION_STACK="$SERVICE_STACK_STACK-bastion"

EC2_KEY_NAME=$(yarn --silent oprah fetch -k /"$STAGE"/engstats/config/EC2_KEY_NAME -s "$STAGE")

echo "START: Create Stack"
# HACK: AWS_PAGER="" -- Container does not have 'less'
AWS_PAGER="" aws cloudformation deploy \
    --template-file "./stacks/bastion.yml" \
    --stack-name "$BASTION_STACK" \
    --parameter-overrides "ServiceStackName=$SERVICE_STACK_STACK" "EC2SSHKeyName=$EC2_KEY_NAME" \
    --no-fail-on-empty-changeset
echo "DONE: Create Stack"


echo "START: wait stack-create-complete"
aws cloudformation wait stack-create-complete --stack "$BASTION_STACK"
echo "DONE: wait stack-create-complete"

BASTION_PUBLIC_DNS_NAME=$(aws cloudformation describe-stacks --stack-name "$BASTION_STACK" --query "Stacks[0].Outputs[?OutputKey=='BastionPublicDnsName'].OutputValue" --output text)
DATABASE_HOST_NAME=$(aws cloudformation describe-stacks --stack-name "$BASTION_STACK" --query "Stacks[0].Outputs[?OutputKey=='DatabaseHostName'].OutputValue" --output text)
DATABASE_PORT=$(aws cloudformation describe-stacks --stack-name "$BASTION_STACK" --query "Stacks[0].Outputs[?OutputKey=='DatabasePort'].OutputValue" --output text)
DATABASE_SECRET_ARN=$(aws cloudformation describe-stacks --stack-name "$BASTION_STACK" --query "Stacks[0].Outputs[?OutputKey=='DatabaseSecretArn'].OutputValue" --output text)
DATABASE_SECRET=$(aws secretsmanager get-secret-value --secret-id "$DATABASE_SECRET_ARN" | jq --raw-output .SecretString | jq -r ."password" )
DATABASE_USERNAME=$(aws secretsmanager get-secret-value --secret-id "$DATABASE_SECRET_ARN" | jq --raw-output .SecretString | jq -r ."username" )
DATABASE_DATABASE_NAME=$(aws secretsmanager get-secret-value --secret-id "$DATABASE_SECRET_ARN" | jq --raw-output .SecretString | jq -r ."dbname" )

EC2_KEY_S3_BUCKET=$(yarn --silent oprah fetch -k /"$STAGE"/engstats/config/EC2_KEY_S3_BUCKET -s "$STAGE")


echo "START: SSH Key Download"
aws s3 cp "s3://$EC2_KEY_S3_BUCKET/$EC2_KEY_NAME.pem" "./$EC2_KEY_NAME.pem"
chmod 0400 "./$EC2_KEY_NAME.pem"
echo "STOP: SSH Key Download"

DATABASE_LOCAL_PORT=$(yarn --silent oprah fetch -k /"$STAGE"/engstats/config/DATABASE_LOCAL_PORT -s "$STAGE")

echo "START: SSH Tunnel"
# Do I need to clean this up
# HACK: -o trusts that the EC2 instance is not MTM
# -4 IPV4
nohup ssh -i "./$EC2_KEY_NAME.pem" \
    -4 \
    -o "StrictHostKeyChecking=no" \
    -N -L \
    "$DATABASE_LOCAL_PORT:$DATABASE_HOST_NAME:$DATABASE_PORT" \
    "ec2-user@$BASTION_PUBLIC_DNS_NAME" \
    > /dev/null 2> /dev/null < /dev/null &
sleep 5 # HACK: Sleep 5 seconds to that it can connect before moving into next query
rm -rf "./$EC2_KEY_NAME.pem"
echo "DONE: SSH Tunnel"

# HACK: Is required so that other querys that follow this command have a warm SQL instance to avoid timeouts
#   https://github.com/knex/knex/issues/2820
echo "START: Running warming query"
PGPASSWORD="$DATABASE_SECRET" \
    psql -U "$DATABASE_USERNAME" \
    -d "$DATABASE_DATABASE_NAME" \
    -p "$DATABASE_LOCAL_PORT" \
    -h localhost \
    -c 'SELECT * FROM pg_catalog.pg_tables' >/dev/null || true # HACK: Sometimes can timeout, though warms the instance regardless
echo "DONE: Running warming query"